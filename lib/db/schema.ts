import type { InferSelectModel } from 'drizzle-orm';
import {
  pgTable,
  varchar,
  timestamp,
  json,
  uuid,
  text,
  primaryKey,
  foreignKey,
  boolean,
} from 'drizzle-orm/pg-core';

// Enhanced user table with Privy authentication and Self Protocol verification
export const user = pgTable('User', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  email: varchar('email', { length: 64 }),
  password: varchar('password', { length: 64 }),
  // Privy authentication fields
  privyDID: varchar('privyDID', { length: 255 }),
  walletAddress: varchar('walletAddress', { length: 255 }),
  // Self Protocol verification fields
  isVerified: boolean('isVerified').default(false),
  verificationDate: timestamp('verificationDate'),
  // User metadata
  createdAt: timestamp('createdAt').notNull().defaultNow(),
  updatedAt: timestamp('updatedAt').notNull().defaultNow(),
});

export type User = InferSelectModel<typeof user>;

// User session table to track login sessions
export const userSession = pgTable('UserSession', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  userId: uuid('userId')
    .notNull()
    .references(() => user.id),
  loginMethod: varchar('loginMethod', { enum: ['email', 'wallet'] }).notNull(),
  ipAddress: varchar('ipAddress', { length: 45 }),
  userAgent: text('userAgent'),
  createdAt: timestamp('createdAt').notNull().defaultNow(),
  expiresAt: timestamp('expiresAt'),
  isActive: boolean('isActive').notNull().default(true),
});

export type UserSession = InferSelectModel<typeof userSession>;

export const chat = pgTable('Chat', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  createdAt: timestamp('createdAt').notNull().defaultNow(),
  updatedAt: timestamp('updatedAt').notNull().defaultNow(),
  title: text('title').notNull(),
  userId: uuid('userId')
    .notNull()
    .references(() => user.id),
  visibility: varchar('visibility', { enum: ['public', 'private'] })
    .notNull()
    .default('private'),
});

export type Chat = InferSelectModel<typeof chat>;

export const message = pgTable('Message', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  chatId: uuid('chatId')
    .notNull()
    .references(() => chat.id),
  role: varchar('role').notNull(),
  content: json('content').notNull(),
  createdAt: timestamp('createdAt').notNull().defaultNow(),
  // Track if this message was generated by an agent
  isAgentGenerated: boolean('isAgentGenerated').default(false),
  // Store the agent type if applicable
  agentType: varchar('agentType', { length: 64 }),
});

export type Message = InferSelectModel<typeof message>;

// Agent session table to track agent interactions
export const agentSession = pgTable('AgentSession', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  userId: uuid('userId')
    .notNull()
    .references(() => user.id),
  chatId: uuid('chatId')
    .notNull()
    .references(() => chat.id),
  agentType: varchar('agentType', { length: 64 }).notNull(),
  startedAt: timestamp('startedAt').notNull().defaultNow(),
  endedAt: timestamp('endedAt'),
  status: varchar('status', { enum: ['active', 'completed', 'failed'] })
    .notNull()
    .default('active'),
  metadata: json('metadata'),
});

export type AgentSession = InferSelectModel<typeof agentSession>;

// Agent execution logs for detailed tracking
export const agentExecutionLog = pgTable('AgentExecutionLog', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  agentSessionId: uuid('agentSessionId')
    .notNull()
    .references(() => agentSession.id),
  stepId: varchar('stepId', { length: 64 }).notNull(),
  stepName: varchar('stepName', { length: 128 }).notNull(),
  status: varchar('status', { enum: ['pending', 'in_progress', 'completed', 'failed'] })
    .notNull(),
  message: text('message'),
  timestamp: timestamp('timestamp').notNull().defaultNow(),
  metadata: json('metadata'),
});

export type AgentExecutionLog = InferSelectModel<typeof agentExecutionLog>;

export const vote = pgTable(
  'Vote',
  {
    chatId: uuid('chatId')
      .notNull()
      .references(() => chat.id),
    messageId: uuid('messageId')
      .notNull()
      .references(() => message.id),
    isUpvoted: boolean('isUpvoted').notNull(),
  },
  (table) => {
    return {
      pk: primaryKey({ columns: [table.chatId, table.messageId] }),
    };
  },
);

export type Vote = InferSelectModel<typeof vote>;

export const document = pgTable(
  'Document',
  {
    id: uuid('id').notNull().defaultRandom(),
    createdAt: timestamp('createdAt').notNull().defaultNow(),
    title: text('title').notNull(),
    content: text('content'),
    kind: varchar('kind', { enum: ['text', 'code', 'image', 'sheet', 'blockchain-explorer'] })
      .notNull()
      .default('text'),
    userId: uuid('userId')
      .notNull()
      .references(() => user.id),
  },
  (table) => {
    return {
      pk: primaryKey({ columns: [table.id, table.createdAt] }),
    };
  },
);

export type Document = InferSelectModel<typeof document>;

// Blockchain exploration results
export const blockchainExploration = pgTable('BlockchainExploration', {
  id: uuid('id').primaryKey().notNull().defaultRandom(),
  userId: uuid('userId')
    .notNull()
    .references(() => user.id),
  documentId: uuid('documentId')
    .notNull()
    .references(() => document.id),
  query: text('query').notNull(),
  address: varchar('address', { length: 255 }),
  network: varchar('network', { length: 64 }),
  createdAt: timestamp('createdAt').notNull().defaultNow(),
  completedAt: timestamp('completedAt'),
  status: varchar('status', { enum: ['pending', 'in_progress', 'completed', 'failed'] })
    .notNull()
    .default('pending'),
  results: json('results'),
});

export type BlockchainExploration = InferSelectModel<typeof blockchainExploration>;

export const suggestion = pgTable(
  'Suggestion',
  {
    id: uuid('id').notNull().defaultRandom(),
    documentId: uuid('documentId').notNull(),
    documentCreatedAt: timestamp('documentCreatedAt').notNull(),
    originalText: text('originalText').notNull(),
    suggestedText: text('suggestedText').notNull(),
    description: text('description'),
    isResolved: boolean('isResolved').notNull().default(false),
    userId: uuid('userId')
      .notNull()
      .references(() => user.id),
    createdAt: timestamp('createdAt').notNull().defaultNow(),
  },
  (table) => ({
    pk: primaryKey({ columns: [table.id] }),
    documentRef: foreignKey({
      columns: [table.documentId, table.documentCreatedAt],
      foreignColumns: [document.id, document.createdAt],
    }),
  }),
);

export type Suggestion = InferSelectModel<typeof suggestion>;
